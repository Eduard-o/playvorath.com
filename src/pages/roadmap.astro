---
import '../styles/roadmap.css';
---

<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="author" content="Eduard-o" />
        <meta name="description" content="" />
        <meta name="keywords" content="" />
        <meta name="generator" content="{Astro.generator}" />
        <script is:inline src="//cdn.jsdelivr.net/npm/three/build/three.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/three-spritetext/dist/three-spritetext.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/three/examples/js/postprocessing/Pass.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/three/examples/js/shaders/CopyShader.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/three/examples/js/shaders/LuminosityHighPassShader.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/three/examples/js/postprocessing/UnrealBloomPass.js"></script>
        <script is:inline src="//cdn.jsdelivr.net/npm/3d-force-graph/dist/3d-force-graph.min.js"></script>
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <title>Roadmap</title>
    </head>
    <body>
        <div id="graph"></div>
        <script>
            fetch('/playvorath.com/roadmap.json')
                .then((res) => res.json())
                .then((data) => {
                    const NODE_SIZE = 1;
                    const DIMENSIONS = 2;
                    const LINK_DIST = 85;
                    const HEAD_NODE = data.nodes.find((node) => node.id == 'Vorath');

                    const Graph = ForceGraph3D({ controlType: 'orbit' })(document.getElementById('graph'))
                        .graphData(data)
                        .backgroundColor('black')
                        .nodeAutoColorBy('group')
                        .nodeId('id')
                        .nodeRelSize(NODE_SIZE)
                        .nodeLabel((node) => {
                            return createNodeLabel(node);
                        })
                        .nodeThreeObject((node) => {
                            return createNodeSprite(node);
                        })
                        .linkOpacity(1)
                        .linkDirectionalParticles((link) => {
                            return nodeStatusCheck(link) ? '3' : '0';
                        })
                        .linkDirectionalParticleSpeed(0.002)
                        .linkDirectionalParticleWidth(3)
                        .linkDirectionalParticleColor(() => 'orange')
                        .cooldownTicks(300)
                        .d3VelocityDecay(0.1)
                        .onNodeClick((node) => {
                            nodeClickHandler(node);
                        });

                    Graph.d3Force('link').distance((link) => LINK_DIST);
                    Graph.numDimensions(DIMENSIONS);
                    Graph.onEngineStop(() => Graph.zoomToFit(200));

                    const bloomPass = new THREE.UnrealBloomPass();
                    bloomPass.strength = 0.5;
                    bloomPass.radius = 0.5;
                    bloomPass.threshold = 0.01;
                    Graph.postProcessingComposer().addPass(bloomPass);

                    function nodeClickHandler(node) {
                        if (node.url != undefined) {
                            window.open(node.url, '_blank');
                            return;
                        }
                    }

                    function createNodeLabel(node) {
                        let text = `<span class="title">${node.id}</span>`;
                        if (node.type != undefined) {
                            text += ` <span class="type">[${
                                node.type.charAt(0).toUpperCase() + node.type.slice(1)
                            }]</span>`;
                        }
                        if (node.status != undefined) {
                            text += ` <span class="status ${node.status}">[${
                                node.status.charAt(0).toUpperCase() + node.status.slice(1)
                            }]</span>`;
                        }
                        if (node.tooltip != undefined) {
                            text += `<br>${node.tooltip}`;
                        }
                        if (node.url != undefined) {
                            text += `<br><span class="dim">(Open: ${node.url})</span>`;
                        }
                        text = `<div class="tooltip">${text}</div>`;

                        return text;
                    }

                    function createNodeSprite(node) {
                        let text = node.id;
                        const sprite = new SpriteText(text);
                        let fontSize = node.val / 5;
                        let borderColor =
                            node.status == 'completed'
                                ? 'limegreen'
                                : node.status == 'in-progress'
                                ? 'orange'
                                : 'white';

                        sprite.padding = 2;
                        sprite.backgroundColor = node.status == 'planned' ? 'rgba(105, 105, 105, .5)' : 'black';
                        sprite.color = node.color;
                        sprite.borderColor = borderColor;
                        sprite.borderWidth = 1;
                        sprite.borderRadius = 3;
                        sprite.textHeight = fontSize * node.val;

                        return sprite;
                    }

                    function nodeStatusCheck(link) {
                        let targetNode = data.nodes.find((node) => node.id == link.target);
                        if (targetNode.status == 'in-progress' || targetNode.child == 'in-progress') {
                            walk(link);
                            return true;
                        }
                        return false;
                    }

                    function walk(link) {
                        if (link.source == HEAD_NODE.id) {
                            HEAD_NODE['child'] = 'in-progress';
                            return;
                        }

                        let node = data.nodes.find((node) => node.id == link.source);

                        if (node['child'] == 'in-progress') return;

                        node['child'] = 'in-progress';
                        walk(data.links.find((link) => node.id == link.target));
                    }
                });
        </script>
    </body>
</html>
